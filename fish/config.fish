#
# config.fish

# Set fish_greeting to empty = not showing
set -g fish_greeting

# XDG Base Directory, User Directories
set -gx XDG_CONFIG_HOME "$HOME/.config"
set -gx XDG_CACHE_HOME "$HOME/.cache"
set -gx XDG_BIN_HOME "$HOME/.local/bin"
set -gx XDG_DATA_HOME "$HOME/.local/share"
set -gx XDG_STATE_HOME "$HOME/.local/state"

# XDG_CONFIG_HOME
#   Purpose:        User-specific configuration files.
#   Default:        ~/.config
#   Examples:
#       ~/.config/fish/config.fish
#       ~/.config/nvim/init.lua
#
# XDG_DATA_HOME
#   Purpose:        User-specific data files (non-configuration).
#   Default:        ~/.local/share
#   Used for:       Data that an application generates or downloads, like session files, databases, plugin downloads.
#   Examples:
#       ~/.local/share/nvim/shada/main.shada
#       ~/.local/share/icons
#
# XDG_CACHE_HOME
#   Purpose:        Non-essential cached data, apps can recreate it if needed.
#   Default:        ~/.cache
#   Examples:
#       $XDG_CACHE_HOME/nvim/
#       $XDG_CACHE_HOME/pip/
#
# XDG_STATE_HOME
#   Purpose:        Store state that shouldn't be lost on reboot but isn't config or data.
#   Default:        ~/.local/state
#
# XDG_RUNTIME_DIR
#   Purpose:        Temporary files and sockets, usually cleared at logout.
#   Examples:       Pipewire or systemd user services place sockets here.

function _xdg_bash
    test -d "$XDG_CACHE_HOME/bash"; or mkdir -p "$XDG_CACHE_HOME/bash"
    test -d "$XDG_CONFIG_HOME/bash"; or mkdir -p "$XDG_CONFIG_HOME/bash"
    test -d "$XDG_STATE_HOME/bash"; or mkdir -p "$XDG_STATE_HOME/bash"

    # ~/.bash_aliases
    test -f ~/.bash_aliases; and rm ~/.bash_aliases

    # ~/.bash_history
    test -f ~/.bash_history; and mv ~/.bash_history "$XDG_STATE_HOME/bash/bash_history"

    # ~/.bash_logout
    test -f ~/.bash_logout; and mv ~/.bash_logout "$XDG_STATE_HOME/bash/bash_logout.from_home_dir"
end

function _xdg_less
    test -d "$XDG_STATE_HOME/less"; or mkdir -p "$XDG_STATE_HOME/less"

    # ~/.lesshst
    test -f ~/.lesshst; and mv -f ~/.lesshst "$XDG_STATE_HOME/less/lesshst"
    set -gx LESSHISTFILE "$XDG_STATE_HOME/less/lesshst"
end

function _xdg_python
    test -d "$XDG_STATE_HOME/python"; or mkdir -p "$XDG_STATE_HOME/python"

    # ~/.python_history
    test -f ~/.python_history; and mv -f ~/.python_history "$XDG_STATE_HOME/python/python_history"
    set -gx PYTHON_HISTORY "$XDG_STATE_HOME/python/python_history"
end

function _xdg_wget
    test -d "$XDG_CONFIG_HOME/wget"; or mkdir -p "$XDG_CONFIG_HOME/wget"
    test -d "$XDG_STATE_HOME/wget"; or mkdir -p "$XDG_STATE_HOME/wget"

    if not test -f "$XDG_CONFIG_HOME/wget/wgetrc"
        echo "hsts-file = $XDG_STATE_HOME/wget/wget-hsts" >"$XDG_CONFIG_HOME/wget/wgetrc"

        # ~/.wget-hsts
        test -f ~/.wget-hsts; and mv -f ~/.wget-hsts "$XDG_STATE_HOME/wget/wget-hsts"
    end
    set -gx WGETRC "$XDG_CONFIG_HOME/wget/wgetrc"
end

function _xdg_zsh
    test -d "$XDG_CONFIG_HOME/zsh"; or mkdir -p "$XDG_CONFIG_HOME/zsh"
    test -d "$XDG_STATE_HOME/zsh"; or mkdir -p "$XDG_STATE_HOME/zsh"

    # ~/.zsh_history
    test -f ~/.zsh_history; and mv -f ~/.zsh_history "$XDG_STATE_HOME/zsh/zsh_history"

    # ~/.zcompdump
    for fname in ~/.zcompdump*
        test -f $fname; and mv -f $fname "$XDG_STATE_HOME/zsh/"
    end
end

_xdg_bash
_xdg_less
_xdg_python
_xdg_wget
_xdg_zsh

if status is-interactive
    # Remove underlines
    set fish_color_valid_path # default: '--underline'
    set fish_pager_color_prefix normal --bold # default: 'normal'  '--bold'  '--underline'

    # $EDITOR
    set -gx EDITOR '/usr/bin/vim -n'

    # $PATH: ~/.local/bin
    if test -d $HOME/.local/bin
        fish_add_path $HOME/.local/bin
    end

    # $PATH: /usr/local/go/bin
    if test -d /usr/local/go/bin
        fish_add_path /usr/local/go/bin
    end

    # $PATH: ~/go/bin
    if test -d $HOME/go/bin
        fish_add_path $HOME/go/bin
    end

    # $PATH: ~/.cargo/bin
    if test -d $HOME/.cargo/bin
        fish_add_path $HOME/.cargo/bin
    end

    # $PATH: ~/.local/share/pnpm
    if test -d $XDG_DATA_HOME/pnpm
        # generated by `pnpm setup`
        set -gx PNPM_HOME "$XDG_DATA_HOME/pnpm"
        if not string match -q -- $PNPM_HOME $PATH
            set -gx PATH "$PNPM_HOME" $PATH
        end
    end

    # zoxide, smarter cd
    if command -q zoxide
        zoxide init --cmd cd fish | source
    end

    # fish_title
    #   Default shows truncated directories like ~/.d/f/config.fish
    #
    #   Modified:
    #       `prompt_pwd -d 1 -D 1` to `prompt_pwd -d 0 -D 0`
    #
    #   https://fishshell.com/docs/current/cmds/fish_title.html
    #   https://fishshell.com/docs/current/cmds/prompt_pwd.html
    #
    # Defined in /usr/share/fish/functions/fish_title.fish @ line 1
    function fish_title
        # If we're connected via ssh, we print the hostname.
        set -l ssh
        set -q SSH_TTY
        and set ssh "["(prompt_hostname | string sub -l 10 | string collect)"]"
        # An override for the current command is passed as the first parameter.
        # This is used by `fg` to show the true process name, among others.
        if set -q argv[1]
            echo -- $ssh (string sub -l 20 -- $argv[1]) (prompt_pwd -d 0 -D 0)
        else
            # Don't print "fish" because it's redundant
            set -l command (status current-command)
            if test "$command" = fish
                set command
            end
            echo -- $ssh (string sub -l 20 -- $command) (prompt_pwd -d 0 -D 0)
        end
    end

    function fish_user_key_bindings
        # https://fishshell.com/docs/current/cmds/bind.html#special-input-functions

        bind --erase alt-v # d: edit current command in $EDITOR
        # <M-BS> = backward-kill-word (default)
        # bind ctrl-q backward-kill-word # d: bind --preset ctrl-w backward-kill-path-component
        bind ctrl-w backward-kill-word # d: bind --preset ctrl-w backward-kill-path-component

        # wezterm without tmux, keybinds are defined directly in wezterm
        # for key in q w e r f t
        #     bind --erase alt-$key
        # end

        # if command -q tmux-sessionizer.sh
        #     bind alt-q 'tmux-sessionizer.sh ~; commandline -f repaint'
        #     bind alt-w 'tmux-sessionizer.sh ~/.dotfiles; commandline -f repaint'
        #     bind alt-e 'tmux-sessionizer.sh dot nvim; commandline -f repaint'
        #     bind alt-r 'tmux-sessionizer.sh -n dev1 code; commandline -f repaint'
        #     bind alt-f 'tmux-sessionizer.sh -n dev2 code; commandline -f repaint'
        #     bind alt-t 'tmux-sessionizer.sh pass; commandline -f repaint'
        # end
    end

    # Alias
    if test -f $HOME/.config/fish/alias.fish
        source $HOME/.config/fish/alias.fish
    end

    # Local environment
    if test -f $HOME/.local/local.fish
        source $HOME/.local/local.fish
    end
end
