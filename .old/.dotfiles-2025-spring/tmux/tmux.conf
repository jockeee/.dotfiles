#
# Keymaps
#

# Prefix Key
set -g prefix C-s
set -g escape-time 0      # Default: 500ms, Sensible: 0, Escape delay (when doing prefix)
bind 'C-s' send-prefix    # Prefix + C-s (C-s x2) will send C-s to nested app.
unbind 'C-b'

bind 'r' 'source-file ~/.config/tmux/tmux.conf; display-message "Config reloaded"'  # Reload config
bind 'C-l' 'send-keys C-l'  # "Clear screen", C-l is used by plugin vim-tmux-navigator
bind 'x' 'kill-pane'      # Default: confirm-before -p "kill-pane #P? (y/n)" kill-pane
bind '&' 'kill-window'    # Default: confirm-before -p "kill-window #W? (y/n)" kill-window
# bind 'p' 'previous-window' # Default: previous-window
# bind 'n' 'next-window'     # Default: next-window

# bind '@' 'split-window -v -l 14 -c "#{pane_current_path}"; split-window -h -c "#{pane_current_path}"; select-pane -t 2; select-pane -t 1'
bind 'h' 'last-pane; resize-pane -Z' # "Hide pane" = go to last active pane and zoom it
bind '@' 'split-window -v -l 6 -c "#{pane_current_path}"'
bind '"' 'split-window -v -c "#{pane_current_path}"'  # split vertically, use current panes path
bind '%' 'split-window -h -c "#{pane_current_path}"'  # split horizontally, use current panes path
bind 'c' 'new-window -c "#{pane_current_path}"'       # new window, use current panes path

# Copy mode
bind -n PPage 'copy-mode' # page up start copy mode
setw -g mode-keys vi  # Default: emacs, use vi-style key bindings in copy mode (leader and vim keys to navigate panes etc)
bind -T copy-mode-vi 'v' send -X begin-selection
bind -T copy-mode-vi 'y' send -X copy-selection
unbind -T copy-mode-vi MouseDragEnd1Pane  # don't exit copy mode when dragging with mouse

# Tmux sessionizer
bind 's' run-shell "~/.local/bin/tmux-sessionizer.sh"
bind -n 'M-q' run-shell "~/.local/bin/tmux-sessionizer.sh ~"
bind -n 'M-w' run-shell "~/.local/bin/tmux-sessionizer.sh ~/.dotfiles"
bind -n 'M-e' run-shell "~/.local/bin/tmux-sessionizer.sh dot nvim"
bind -n 'M-r' run-shell "~/.local/bin/tmux-sessionizer.sh -n dev1 code"
bind -n 'M-f' run-shell "~/.local/bin/tmux-sessionizer.sh -n dev2 code"
bind -n 'M-t' run-shell "~/.local/bin/tmux-sessionizer.sh pass"

bind 'Q' 'run-shell "~/.config/tmux/plugins/tmux-resurrect/scripts/save.sh"; kill-server'
bind 'q' display-panes

#
# Settings
#

set -g repeat-time 1000    # Default: 500ms, Time to wait for a key binding to repeat, if it is bound with the '-r' flag.

# True Color Support (run :checkhealth in nvim for tips)
set -g default-terminal "tmux-256color"      # tmux-256color | xterm-256color | screen-256color
set -ga terminal-overrides ",xterm*:Tc"      # True Color
set -sa terminal-features ",xterm*:RGB"      # Proper Colors
set -ga terminal-features ",xterm*:usstyle"  # Undercurl

# Pane border
set -g pane-active-border-style 'fg=#353535,bg=default'
set -g pane-border-style 'fg=#353535,bg=default'

# Sensible
set -g display-time 750       # Default: 750ms, Sensible: 4000ms
set -g history-limit 10000    # Default: 2000, Sensible: 50000, Scrollback buffer lines
setw -g aggressive-resize on  # Default: off, Sensible: on, Useful when using "grouped sessions" and multi-monitor setup

set -g set-clipboard on       # Use system clipboard
set -g detach-on-destroy off  # Whether to detach when a session is destroyed, or switch the client to another session if any exist
set -g mouse on               # Mouse support, resize windows and select tabs
set -g base-index 1           # Start indexing windows at 1 instead of 0
setw -g pane-base-index 1     # Start indexing panes at 1 instead of 0
set -g renumber-windows on    # Renumber all windows when any window is closed
set -g allow-rename off       # Default: off, Whether applications are allowed to use the escape sequence to rename windows. This is a window and pane option.
setw -g allow-rename off      # Default: off, Whether applications are allowed to use the escape sequence to rename windows. This is a window and pane option.
set -g set-titles on          # Allow tmux to set the terminal title
set -g set-titles-string "#W #{session_alerts}"
# set -g set-titles-string "#W #{=|-24|\u2026;s|$HOME|~|:pane_current_path} #{session_alerts}"

# Status line
setw -g monitor-activity on   # Default: off, Whether an alert is triggered by activity
set -g focus-events on        # Default: off, Whether to send focus events to applications
set -g status-interval 5      # Default: 15, Refresh 'status-left' and 'status-right' more often, from every 15s to 5s
set -g status-style "fg=#7c7d83 bg=#1f1f1f"
set -g status-left "#{?client_prefix,#[fg=#b1b1b1],} #{session_name}  "  # Default: [#{session_name}]
set -g status-left-length     100
set -g status-right '#{?window_bigger,[#{window_offset_x}#,#{window_offset_y}] ,}"#{=21:pane_title}" %b %d %H:%M '
setw -g window-status-current-style  "fg=#b1b1b1"
setw -g window-status-activity-style reverse  # Default: reverse, Style of windows in the status line with an activity alert
setw -g window-status-format " #[bold]#{?window_zoomed_flag, ,}#[nobold]#W "
setw -g window-status-current-format " #[bold]#{?window_zoomed_flag, ,}#W#[nobold] "
# setw -g window-status-format "#[bold]#{?window_zoomed_flag, ,}#[nobold]#W #{=|-24|\u2026;s|$HOME|~|:pane_current_path} "
# setw -g window-status-current-format "#[bold]#{?window_zoomed_flag, ,}#[nobold]#W #{=|-24|\u2026;s|$HOME|~|:pane_current_path} "

#
# Plugins
#

set -g @plugin "tmux-plugins/tpm"                  # Tmux Plugin Manager
set -g @plugin "tmux-plugins/tmux-yank"            # Yank support, Tmux copying to system clipboard
# set -g @plugin "christoomey/vim-tmux-navigator"    # Navigate Tmux and Nvim in the same way

set -g @plugin 'tmux-plugins/tmux-resurrect'       # Save and restore Tmux environment
set -g @resurrect-dir '~/.config/tmux/resurrect'   # Default: ~/.tmux/resurrect
set -g @resurrect-save 'S'                         # Default: Prefix + C-s, New: Prefix + S, run-shell ~/.config/tmux/plugins/tmux-resurrect/scripts/save.sh
set -g @resurrect-restore 'R'                      # Default: Prefix + C-r, New: Prefix + R, run-shell ~/.config/tmux/plugins/tmux-resurrect/scripts/restore.sh

set -g @plugin "morantron/tmux-fingers"            # Copy/paste with vimium/vimperator style
set -g @fingers-key f                              # Default: F, Key to activate tmux-fingers, Tmux Default: C-f find window
set -g @fingers-main-action ":paste:"              # Default: :copy:
set -g @fingers-shift-action ":copy:"              # Default: :paste:
set -g @fingers-pattern-0 "([a-zA-Z0-9]{8,})"      # Match N or more alphanumeric characters

# Initialize Tmux plugin manager
run "~/.config/tmux/plugins/tpm/tpm"

# https://github.com/mrjones2014/smart-splits.nvim#tmux
# Smart pane switching with awareness of Neovim splits.
bind-key -n C-h if -F "#{@pane-is-vim}" 'send-keys C-h'  'select-pane -L'
bind-key -n C-j if -F "#{@pane-is-vim}" 'send-keys C-j'  'select-pane -D'
bind-key -n C-k if -F "#{@pane-is-vim}" 'send-keys C-k'  'select-pane -U'
bind-key -n C-l if -F "#{@pane-is-vim}" 'send-keys C-l'  'select-pane -R'
# Smart pane resizing with awareness of Neovim splits.
bind-key -n M-Left if -F "#{@pane-is-vim}" 'send-keys M-Left' 'resize-pane -L 1'
bind-key -n M-Down if -F "#{@pane-is-vim}" 'send-keys M-Down' 'resize-pane -D 1'
bind-key -n M-Up if -F "#{@pane-is-vim}" 'send-keys M-Up' 'resize-pane -U 1'
bind-key -n M-Right if -F "#{@pane-is-vim}" 'send-keys M-Right' 'resize-pane -R 1'
